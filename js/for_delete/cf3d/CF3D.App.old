/* 

 */

var CF3D = {
    scene:null,
    camera:null,
    base_url:null,
    container:null,
    renderer:null,
    controls:null,
    labelRenderer:null,
    mouse:null,
    move:null,
    data:null,
		children:null,
		parent:null,
		context:null,
    raycaster:new THREE.Raycaster(),
    projector: new THREE.Projector(),
    save_object:null,
		connect_obj1:null,
		connect_obj2:null,
		click_object:null,
		mode:"SINGLE",// MULTIPLE
		right_click_sel_obj:null,
		list_obj:null,
		add_element:null,
		form_data_import:null,
		hidn_name: true,
		conframe_id: null,
		gridHelper: null,
		planeHelper: null,
		list_settings: null,
		save_history: true,
		lines: [],
		config: null,
		change_lvl_color: null,
		param_move_object: false,
		transformControls: null,
			copy_element: null,
    selected_obj:null,
	Subject:[]
};
var paste_position;
var settings = new Array();
var default_object = {
					'color': 0xeeeeee,
					'radius': 100,
					'height': 200,
					'width': 200,
					'depth': 200,
					'radiusTop':1,
					'radiusBottom':100,
					'radiusSegments':32,
					'name': 'New_object',
					'sbj_id': 0,
					'X': 0,
					'Y': 0,
					'Z': 0,
					'level':1
				}

CF3D.init = function (){
			this.scene = new THREE.Scene();//создание сцены для формирования 3d объектов
			this.camera = new THREE.PerspectiveCamera(35, window.innerWidth/window.innerHeight, 1, 1000000);
			this.camera.position.z = 6300; //установление позиции камеры по оси z
			this.camera.position.x = 0; //установление позиции камеры по оси x
			this.camera.position.y = 5000; //установление позиции камеры по оси y

			this.config = new Config();
			
		this.container = document.createElement( 'div' );
		this.container.style.top='0';
		this.container.style.left='0';
		this.container.style.position='absolute';
		this.container.style.zIndex = '-1';

			
			
			this.renderer = new THREE.WebGLRenderer();
			if ($.cookie("background_color") && $.cookie("background_color")!='null') {
				this.renderer.setClearColorHex($.cookie("background_color"));
			}
			else {
				this.renderer.setClearColorHex(0xe5e5e5);
			}
			
			this.renderer.shadowMapEnabled = false;// появляется тень от источника света
			this.renderer.setSize(window.innerWidth, window.innerHeight);
			this.renderer.shadowMapWidth = 5024;
			this.renderer.shadowMapHeight = 5024;
			this.renderer.shadowMapDarkness = 1;
		
		field_canvas=document.getElementById('field_building');

		document.body.appendChild( this.container );

		
		this.container.appendChild( this.renderer.domElement );	
		this.renderer.domElement.style.position = "relative";
		this.renderer.domElement.style.top = '0';		
		this.renderer.domElement.style.left = '0';
		this.renderer.domElement.style.zIndex = '0';		
		this.controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );



//		CF3D.create_area_labels();
		
				this.labelRenderer = new THREE.CSS2DRenderer();
				this.labelRenderer.setSize( window.innerWidth, window.innerHeight );
				this.labelRenderer.domElement.style.position = 'absolute';
				this.labelRenderer.domElement.style.top = '0';
				this.labelRenderer.domElement.style.left = '0';
				this.labelRenderer.domElement.style.zIndex = '0';
				this.labelRenderer.domElement.style.pointerEvents = 'none';
				this.container.appendChild( this.labelRenderer.domElement );		
		
			
		
			this.mouse = new THREE.Vector2();		
			this.move = new THREE.Vector2();
			this.create_light();
			
			
			document.addEventListener('mousemove',function (event){
				
				CF3D.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				CF3D.mouse.y = -( event.clientY / window.innerHeight ) * 2 + 1;
				CF3D.move.x=event.clientX
				CF3D.move.y=event.clientY
				

			})
			


			if ($.cookie("hidden_name") == 'false') {
				CF3D.hidden_name()
			}
			
			CF3D.init_helper_arrow()
			

			
			document.addEventListener('mousedown',function (event){ 
				if (CF3D.selected_obj && CF3D.selected_obj.arrow_move){
					CF3D.param_move_object=true;
				}
			})
			
			document.addEventListener('mouseup',function (event){
				CF3D.param_move_object=false
			})

			
			document.addEventListener('dblclick',function (event){
				if (CF3D.selected_obj && CF3D.selected_obj['type_element']) {
					if (CF3D.mode=="MULTIPLE") {
						CF3D.open_object(CF3D.selected_obj['sbj_id']);
					}
/*					else if (CF3D.mode=="MULTIPLESINGLE" && CF3D.selected_obj['open_obj']==false){
						CF3D.open_object(CF3D.selected_obj['sbj_id']);
					}
					*/
					//CF3D.open_object();
					CF3D.selected_obj.dispatchEvent({type:'dblclick'});
				}
			});
	
			$('#obj_lvl_color').change(function (){
				$.cookie("obj_lvl_color", $(this).val());
				for (var i in CF3D.scene.children){
					if (CF3D.scene.children[i].level ){ 
						if (CF3D.scene.children[i].level==CF3D.right_click_sel_obj['level']){
							CF3D.scene.children[i].material.color.setHex("0x"+$.cookie("obj_lvl_color").substr(1))
							CF3D.scene.children[i].material.emissive.setHex("0x"+$.cookie("obj_lvl_color").substr(1))
						}
					}
				}
			})			

			
			
			var intersects;
			//вывод контесктного меню при клике правой кнопкой мыши
			$('canvas').click(function (event){
				if (CF3D.planeHelper){
					var vector = new THREE.Vector3( CF3D.mouse.x, CF3D.mouse.y, 1 );
					CF3D.projector.unprojectVector( vector, CF3D.camera );
					CF3D.raycaster.set( CF3D.camera.position, vector.sub( CF3D.camera.position ).normalize() );
					intersects = CF3D.raycaster.intersectObjects( CF3D.scene.children );
					if (intersects.length>0){
						if ( intersects[0]['object'].geometry instanceof THREE.PlaneGeometry ) {
							if (CF3D.add_element!=null) {
								new_position = intersects[0]['point'];
								var new_object = default_object;
								new_object['X'] = new_position.x;
								new_object['Z'] = new_position.z;
								new_object['sbj_id'] = CF3D.scene.children.length;
								CF3D['add_'+CF3D.add_element](new_object)
								CF3D.transformControls.attach(CF3D.scene.children[CF3D.scene.children.length-2])
								CF3D.add_element=null;
								CF3D.right_click_sel_obj = CF3D.scene.children[CF3D.scene.children.length-2]
							}
						}
					}
				}
				else if ( event.shiftKey && CF3D.click_object && (CF3D.click_object != CF3D.selected_obj)){
					CF3D.connect_obj1 = CF3D.click_object;
					CF3D.connect_obj2 = CF3D.selected_obj;
					CF3D.create_connect();
				}
				else if ( CF3D.selected_obj ) {
					CF3D.click_object = CF3D.selected_obj;
				}
				else if ( CF3D.mode == 'EDITOR' ) {alert(langs.get_term("txt_not_plane"))}
				$("#pop_up_window_div").remove();
			})
				
			//событие при клике правой кнопкой мыши
			$('body').bind("contextmenu",function(event){
				if (CF3D.selected_obj) {	
					open_pop_window(event.clientX,event.clientY,"object")
				}
				else if (paste_position)(open_pop_window(event.clientX,event.clientY,"plane"))
			})
			
			window.addEventListener( 'resize', onWindowResize, false );
			
			$(document).keydown(function(event) {CF3D.event_keyboard()})
			
}

var db_name, scheme, table, color_line
/*
 * функция открывания объекта
 * vadim
 * 20140930
 */
CF3D.open_object = function(){

	if (CF3D.selected_obj['open_obj']==false){
		$('#edit_window').dialog('close')
		if (CF3D.right_click_sel_obj){ 
			id = CF3D.right_click_sel_obj['sbj_id']
			CF3D.change_lvl_color=null
		}
		var data={};
		data['id']=CF3D.selected_obj['sbj_id'];
		data['parent']=true;
		data['db_name']=db_name;
		data['scheme']=scheme;
		data['table']=table;
		query=$.ajax({
			url: CF3D.base_url+'index.php/qcf3d/open_object/',
			type:'POST',
			data:data
			});
		query.done(function (response, textStatus, jqXHRб){
			CF3D.right_click_sel_obj=null;
			data = (JSON.parse(response))
			
			CF3D.children = data['children'];
			if (CF3D.children.length == 0){ alert(langs.get_term('I238')) }
			else CF3D.build_children(data['data_obj']['id'])
		});
	}
	else {
		CF3D.selected_obj['open_obj']=false
		close_object (CF3D.selected_obj)
	}
}
//конец фукнции

CF3D.open_root = function (id){
	var data={};
	data['id']=id;
	data['db_name']=db_name;
	data['scheme']=scheme;
	data['table']=table;
	query=$.ajax({
		url: CF3D.base_url+'index.php/qcf3d/open_object/',
		type:'POST',
		data:data
		});
	query.done(function (response, textStatus, jqXHRб){
		data = (JSON.parse(response))
		CF3D.clear_scene();
		CF3D.load_import(data)
	});
}
//конец фукнции


/*
 * функция удаление линий и потомков объекта (функция - реляционная)
 * vadim
 * 20141001
 */
close_object = function (obj){
	var lines = obj['lines'];
	for (var i=0; i<lines.length;i++){
		if (lines[i]['from'] == obj){
			CF3D.scene.remove(lines[i])
			close_object(lines[i]['to'])
			CF3D.scene.remove(lines[i]['to']['label'])
			CF3D.scene.remove(lines[i]['to'])

		}
		
	}

}
//конец фукнции


/*
 * функция построения потомков в объекта
 * vadim
 * 20140930
 */
CF3D.build_children = function (parent_id){

//	var s = window.location.search;
//	s = s.match(new RegExp('children=([^&=]+)'));

	var parent = search_obj('sbj_id',parent_id);
	parent['open_obj']=true;
	parent['child_obj']=new Array();
	
	var d_y=1000;

	for (var j in CF3D.children){
		if (CF3D.children.length == 1){
			var x = parent.position.x
			var y = parent.position.y-d_y
			var z = parent.position.z
		}
		else {
			new_position = get_position_children_circle (CF3D.children.length, d_y, parseInt(j), parent)
			var x = new_position.x
			var y = new_position.y
			var z = new_position.z
		}
		if (CF3D.children[j]['children'].length >0 ){
			var color = settings['color_object_child'];
		}
		else{
			var color = settings['color_object_not_child'];
		}
		CF3D.add_element='sphere';
		CF3D['add_'+CF3D.add_element]({'color': color, 'radius': 100, 'sbj_id': CF3D.children[j]['id'],'name': CF3D.children[j]['name'], 'X': x, 'Y': y, 'Z':z, 'level': parent.level+1, 'child_obj':CF3D.children[j]['children'],'parent_obj':parent})
//		CF3D.building_object({'color': color, 'radius': 100, 'sbj_id': CF3D.children[j]['id'],'name': CF3D.children[j]['name'], 'X': x, 'Y': parent.position.y-d_y, 'Z':z, 'level': parent.level+1})
		parent.child_obj[parent.child_obj.length] = CF3D.scene.children[CF3D.scene.children.length-2];
		
		if (settings['type_line'] == null) settings['type_line']='curl';
		record_arr_connected_obj(CF3D.scene.children[CF3D.scene.children.length-2],parent,settings['type_line'])
	}
	CF3D.create_lines()
}
//конец функции


/*
 * функция нахождения объекта по параметру в поле
 * vadim
 * 20140930
 */
search_obj = function (field,id){
	for (var i=0; i<CF3D.scene.children.length;i++){
		if (CF3D.scene.children[i][field]==id){
			return CF3D.scene.children[i];
		}
	}
}
//конец функции


/*
 * показать/скрыть наименования объектов
 * vadim
 * 20140930
 */
CF3D.hidden_name = function (){
	$('.label').toggleClass('hidn_label');
	if (CF3D.hidn_name==false) {
		$.cookie("hidden_name", true)
		CF3D.hidn_name=true
	}
	else {
		$.cookie("hidden_name", false)
		CF3D.hidn_name=false
	}
}
//конец функции


/*
 * показать/скрыть сетку и плоскость объектов
 * vadim
 * 20140930
 */
CF3D.set_grid_visiblity = function (){
	if ($.cookie("grid") == 'false'){
		$.cookie("grid", true);
		CF3D.planeHelper.visible = true; 
		CF3D.gridHelper.visible = true;
	}
	else {
		$.cookie("grid", false);
		CF3D.planeHelper.visible = false; 
		CF3D.gridHelper.visible = false;
	}
}
//конец функции


/*
 * функция построения вспомогательной сетки и плоскости
 * vadim
 * 20141013
 */
CF3D.create_grid = function (){
	var gridhelper_size = 5000;
	var gridhelper_step = 100;
		$.cookie("grid", true);
		CF3D.gridHelper = new THREE.GridHelper( gridhelper_size, gridhelper_step );
		CF3D.gridHelper.setColors(settings['color_gridhelper_centline'], settings['color_gridhelper_line']);
		CF3D.scene.add( CF3D.gridHelper );
		CF3D.planeHelper = new THREE.Mesh( new THREE.PlaneGeometry( 10000, 10000 ), new THREE.MeshLambertMaterial( { opacity: settings['opacity_gridhelper_plane'], color: settings['color_gridhelper_plane'],  transparent:true } ) );
		CF3D.planeHelper.rotation.x = - Math.PI / 2;
		CF3D.planeHelper.visible = true;
		CF3D.scene.add( CF3D.planeHelper );
		CF3D.planeHelper.paste_element = function (){
			if (CF3D.copy_element){
				CF3D.copy_element.id = CF3D.scene.children.length+1;
				object = $.extend([],CF3D.copy_element);
				object.type_element = CF3D.copy_element.type_element;
				object.select = CF3D.copy_element.select;
				object.open_obj = CF3D.copy_element.open_obj;
				object.lines=[];
				object.open_obj=false;			
				object.sbj_id=CF3D.scene.children.length;
//				object.id=CF3D.scene.children.length;

/*
				CF3D.copy_element = this.clone();
				CF3D.copy_element.type_element = this.type_element;
				CF3D.copy_element.select = this.select;
				CF3D.copy_element.open_obj = this.open_obj;
				CF3D.copy_element.lines=[];
				CF3D.copy_element.open_obj=false;
				CF3D.copy_element.sbj_id=CF3D.scene.children.length;
*/

				object.position.set(paste_position.x,paste_position.y,paste_position.z);
				CF3D.scene.add(object);
				CF3D.add_label_name(object);
				CF3D.right_click_sel_obj = object;
				CF3D.move_object();
				//CF3D.copy_element = null;
				//CF3D.create_lines()
			}
			$('#pop_up_window_div').remove();
		}
}
//конец функции

CF3D.show_settings = function (){

	id_win = "settings_window";	
	data_dialog = {
		parameters:	{
			title: langs.get_term("txt_panel_settings"),
			autoOpen: false,
			height: 'auto',
			width: 'auto',
			position: 'top',
		},
		down_panel_buttons:[
			{
				"name":langs.get_term('sm_btn_save'),
				"onclick":"CF3D.change_settings()",
				"style":"btn btn-primary btn-sm",
				"id":"btn_save",
			},
			{
				"name":langs.get_term('btn_cancel'),
				"onclick":"$('#"+id_win+"').dialog(\'close\')",
				"style":"btn btn-primary btn-sm",
				"id":"btn_cancel",
			}
		],
		fields_main_content : CF3D.list_settings,
		id_window : id_win,
		view_templ : "tmpl_main_content"
	}	
	
	QC.open_dialog (JSON.stringify(data_dialog))

	init_settings (CF3D.list_settings)
}
//конец функции


/*
 * функция инициализации настроек
 * vadim
 * 20141013
 */
init_settings = function (){

	for (var i in CF3D.list_settings){
		$('#'+CF3D.list_settings[i]['id']).val(settings[CF3D.list_settings[i]['id']])
	}

}
//конец функции



/*
 * функция получения содержимого диалогового окна
 * vadim
 * 20141013
 */
get_main_content = function (field_setting){
		html_content = '<label>'+langs.get_term(field_setting["name"])+'</label><br>';
		if (field_setting["type"] == "select"){
			html_content += '<select class="form-control" id="'+field_setting["id"]+'">';
			html_content += '<option value></option>';
			for (var j in field_setting['options']){
				html_content += '<option value="'+field_setting['options'][j]['style']+'" >'+langs.get_term(field_setting['options'][j]['name'])+'</option>';
			}
			html_content += '</select><br>';
		}
		else {
			html_content += '<input id="'+field_setting['id']+'" type="'+field_setting['type']+'"/><br>';
		}
		return html_content;
}
//конец функции


/*
 * функция сохранения изменений настроек
 * vadim
 * 20141003
 */
CF3D.change_settings = function (){
	for (var i in CF3D.list_settings){
		$.cookie(CF3D.list_settings[i]['id'],$('#'+CF3D.list_settings[i]['id']).val())
	}
	location.reload();
}
//конец функции


// инициализация линий для перемещений
CF3D.init_helper_arrow = function (){

	CF3D.transformControls = new THREE.TransformControls( this.camera, this.container );
		CF3D.transformControls.addEventListener( 'change', function () {
			CF3D.controls.enabled = true;
		});
	CF3D.scene.add( CF3D.transformControls );			

}
// конец

/*
 * функция открытия формы import
 * vadim
 * 20141001
 */
CF3D.open_import = function (){

	id_win = "import_window";	
	data_dialog = {
		parameters:	{
			title: langs.get_term("txt_panel_settings"),
			autoOpen: false,
			height: 'auto',
			width: 500,
			position: 'top',
		},
		down_panel_buttons:[
			{
				"name":langs.get_term('sm_btn_open'),
				"onclick":"CF3D.check_form_import()",
				"style":"btn btn-primary btn-sm",
				"id":"btn_save",
			},
			{
				"name":langs.get_term('btn_cancel'),
				"onclick":"$(\'#"+id_win+"\').dialog(\'close\')",
				"style":"btn btn-primary btn-sm",
				"id":"btn_cancel",
			}
		],
		fields_main_content : [
			{
				"id": "name_db",
				"name" :langs.get_term('txt_db_name'),
				"image": "glyphicon glyphicon-copyright-mark",
				"propeties": "onchange=\"select_choose(\'#name_db\')\"",
				"value": '',
				"type" : "select",
				"options" : CF3D.form_data_import
			},
			{
				"id": "name_scheme",
				"name" :langs.get_term('txt_name_scheme'),
				"image": "glyphicon glyphicon-copyright-mark",
				"propeties": "onchange=\"select_choose(\'#name_scheme\')\"",
				"value": '',
				"type" : "select",
				"options" : []
			},
			{
				"id": "name_table",
				"name" :langs.get_term('txt_name_table'),
				"image": "glyphicon glyphicon-copyright-mark",
				"value": '',
				"type" : "select",
				"options" : []
			},			
		],
		id_window : id_win,
		view_templ: "tmpl_main_content",
	}
	QC.open_dialog(JSON.stringify(data_dialog))

}
// конец функции

/*
 * событие при изменении элемента select
 * vadim
 * 20141002
 */
select_choose = function (id){
	if (id=='#name_db'){
		$('#name_scheme').html(get_content(CF3D.form_data_import[$('#name_db option:selected').val()]['scheme']))
	}
	else if (id=='#name_scheme'){
		$('#name_table').html(get_content(CF3D.form_data_import[$('#name_db option:selected').val()]['scheme'][$('#name_scheme option:selected').attr('numb_row')]['table']))
	}
}
// конец функции

/*
 * функция изменения содержания элемента select
 * vadim
 * 20141002
 */
get_content = function (array_config){
	html_content ='<option value=""></option>';
	for (var i in array_config){
		html_content += '<option value="'+array_config[i]['name']+'" numb_row='+i+'>'+array_config[i]['name']+'</option>';
	}
	return html_content;
}
// конец функции


CF3D.check_form_import = function (){
	if ($('#name_db').val() !='' && $('#name_scheme').val() !='' && $('#name_table').val() !=''){
	//	location.href = CF3D.base_url + 'index.php/qcf3d/import/'+$('#name_db').val()+'/'+$('#name_scheme').val()+'/'+$('#name_table').val()+'/845407'
		location.href = CF3D.base_url + 'index.php/qcf3d/import/'+$('#name_db').val()+'/'+$('#name_scheme').val()+'/'+$('#name_table').val()
	}
}

/*
 * функция диалогового окна данных объекта
 * vadim
 * 20140926
 */
var levels=new Array;
CF3D.open_object_data = function (){
	if (!CF3D.right_click_sel_obj) return;

	if (CF3D.right_click_sel_obj['type_element']){
		var arr_fields =  [
			{
				"id": "conframe",
				"name" : langs.get_term('txt_id'),
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['id'],
				"type" : "label",
			},
			{
				"id": "conframe",
				"name" : langs.get_term('txt_name'),
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['name'],
				"type" : "label",
			},
			{
				"id": "conframe",
				"name" : langs.get_term('txt_parent'),
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['parent_obj']['name'],
				"type" : "label",
			},
			
		];		
	
	}
	else if (CF3D.right_click_sel_obj['type_line']){
		var arr_fields = [
			{
				"id": "from",
				"name" :"txt_parent",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['from']['name'],
				"propeties" : "readonly",
				"type" : "text"
			},
			{
				"id": "to",
				"name" :"txt_child",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['to']['name'],
				"propeties" : "readonly",
				"type" : "text"
			},
			{
				"id": "type_line",
				"name" :"txt_line_type",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['type_line'],
				"propeties" : "readonly",
				"type" : "text"
			}		
		
		];
	}	
		id_win = "open_conframe";		
		data_dialog = {
			parameters:	{
				title: langs.get_term("txt_data_object"),
				autoOpen: false,
				height: 'auto',
				width: 'auto',
				position: 'left top',
			},
			down_panel_buttons:[
				{
					"name":langs.get_term('btn_cancel'),
					"onclick":"$(\'#"+id_win+"\').dialog(\'close\')",
					"style":"btn btn-primary btn-sm",
					"id":"btn_cancel",
				}
			],
			fields_main_content : arr_fields,
			id_window : id_win,
			view_templ: "tmpl_panel_output_info",
		}
		
		QC.open_dialog(JSON.stringify(data_dialog))
		$('#pop_up_window_div').remove()
}
//конец функции

/*
 * функция загрузки формы импортированных данных
 * vadim
 * 20140926
 */
CF3D.load_import = function (data){

	CF3D.mode = "MULTIPLE";
	if (data.length==0) return;
		CF3D.Subject= new Array()
		i=0;
	var d_y=1000;

	CF3D.load_settings_import()
	
	db_name = data['db_name']
	scheme = data['scheme']
	table = data['table']

	
	$('.root_btn').attr('class', 'btn btn-primary root_btn');
	$('#root_'+data['data_obj']['id']).toggleClass('btn-primary btn-success').addClass('active');
	
	this.data=data['data_obj'];
	this.children=data['children'];
	this.parent=data['parent'];
	if (data['context']) this.context=data['context'];
	var d_grad=(2*Math.PI/this.children.length)
	var radius = 500*Math.sqrt(this.children.length);
	CF3D.add_element='sphere';
	CF3D['add_'+CF3D.add_element]({'color': settings['color_main_object'], 'radius': 200, 'sbj_id': this.data['id'], 'name': this.data['name'], 'X': 0, 'Y': d_y, 'Z': 0,'level':this.parent.length+1,'parent_obj':{'id':0,'name':' - '}})
	CF3D.build_children(this.data['id'])
}
//конец функции



/*
 * функция диалогового окна данных объекта
 * vadim
 * 20141009
 */
var levels=new Array;
CF3D.object_edit = function (){
	
	if (!CF3D.right_click_sel_obj) return;
	id_win = "edit_window";	
	if (CF3D.right_click_sel_obj['type_element']){
		var arr_fields = [
			{
				"id": "sbj_id",
				"name" :"txt_id",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['sbj_id'],
				"propeties" : "readonly",				
				"type" : "text"
			},
			{
				"id": "name",
				"name" :"txt_name",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['name'],
				"type" : "text"
			},
			{
				"id": "type_element",
				"name" :"txt_type_element",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['type_element'],
				"type" : "select",
				"options" : [
					{
						"value" : "sphere",
						"name" : langs.get_term("txt_sphere"),
					},
					{
						"value" : "cube",
						"name" : langs.get_term("txt_cube"),
					},
					{
						"value" : "conus",
						"name" : langs.get_term("txt_conus"),
					},
				]
			},
		]
	}	
	else if (CF3D.right_click_sel_obj['type_line']){
		var arr_fields = [
			{
				"id": "from",
				"name" :"txt_parent",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['from']['name'],
				"propeties" : "readonly",
				"type" : "text"
			},
			{
				"id": "to",
				"name" :"txt_child",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['to']['name'],
				"propeties" : "readonly",
				"type" : "text"
			},
			{
				"id": "type_line",
				"name" :"txt_line_type",
				"image": "glyphicon glyphicon-copyright-mark",
				"value": CF3D.right_click_sel_obj['type_line'],
				"propeties" : "readonly",
				"type" : "text"
			}		
		
		];

	}

	data_dialog = {
		parameters:	{
			title: langs.get_term("txt_data_object"),
			autoOpen: false,
			height: 'auto',
			width: 'auto',
			position: 'top',
		},
		down_panel_buttons:[
			{
				"name":langs.get_term('sm_btn_save'),
				"onclick":"CF3D.save_change_object()",
				"style":"btn btn-primary btn-sm",
				"id":"btn_save",
			},
			{
				"name":langs.get_term('btn_cancel'),
				"onclick":"$(\'#"+id_win+"\').dialog(\'close\')",
				"style":"btn btn-primary btn-sm",
				"id":"btn_cancel",
			}
		],
		fields_main_content : arr_fields,
		id_window : id_win,
		view_templ : "tmpl_main_content"
	}	
	

	QC.open_dialog (JSON.stringify(data_dialog))
	
	$("#pop_up_window_div").remove();

}
//конец функции 

/*
 * функция вызова окна добавление потомка объекта
 * vadim
 * 20141014
 */
CF3D.save_change_object = function (){
	
	change_object = search_obj('sbj_id',$('#sbj_id').val())
	change_object.name = $('#name').val()
	change_object.type_element = $('#type_element').val()
	
	CF3D.scene.remove(change_object.label)
	CF3D.scene.remove(change_object)
	var new_object = new Object();
	new_object =  $.extend( [], default_object );
	new_object['name'] = change_object.name;
	new_object['lines'] = change_object.lines;
	new_object['color'] = change_object.material.color;
	new_object['X'] = change_object.position.x;
	new_object['Y'] = change_object.position.y;
	new_object['Z'] = change_object.position.z;
	new_object['level'] = change_object.level;
	CF3D['add_'+ $('#type_element').val()](new_object)
	console.log(change_object)
	$('#edit_window').dialog('close')

}
//конец функции 


/*
 * функция вызова окна добавление потомка объекта
 * vadim
 * 20141009
 */
CF3D.add_object_window = function (){

	if (!CF3D.right_click_sel_obj) return;
	$("#pop_up_window_div").remove();
	id_win = "add_object_window";
	var dialog = CFUtil.dialog.create(id_win,
	{
		title: langs.get_term("txt_data_object"),
		autoOpen: false,
		height: 'auto',
		width: 500,
		position: 'center, top',
	});
	if ( dialog ){


		data_dialog = {
			parameters:	{
				title: langs.get_term("txt_data_object"),
				autoOpen: false,
				height: 'auto',
				width: 'auto',
				position: 'top',
			},
			down_panel_buttons:[
				{
					"name":langs.get_term('sm_btn_save'),
//					"onclick":"alert(1)",
					"onclick":"CF3D.add_object()",
					"style":"btn btn-primary btn-sm",
					"id":"btn_save",
				},
				{
					"name":langs.get_term('btn_cancel'),
					"onclick":"$(\'#"+id_win+"\').dialog(\'close\')",
					"style":"btn btn-primary btn-sm",
					"id":"btn_cancel",
				}
			],
			fields_main_content : [
				{
					"id": "type_line",
					"name" :langs.get_term('txt_line_type'),
					"image": "glyphicon glyphicon-copyright-mark",
					"value": '',
					"type" : "select",
					"options" : [
						{
							"value" : "curl",
							"name" : langs.get_term('txt_curl'),
						},
						{
							"value" : "straight",
							"name" : langs.get_term('txt_straight'),
						},
					]
				},
				{
					"id": "type_object",
					"name" :langs.get_term('txt_type_object'),
					"image": "glyphicon glyphicon-copyright-mark",
					"value": '',
					"type" : "select",
					"options" : [
						{
							"value" : "sphere",
							"name" : langs.get_term("txt_sphere"),
						},
						{
							"value" : "cube",
							"name" : langs.get_term("txt_cube"),
						},
						{
							"value" : "conus",
							"name" : langs.get_term("txt_conus"),
						},
					]
				},
				{
					"id": "name_object",
					"name" :langs.get_term('txt_name'),
					"image": "glyphicon glyphicon-copyright-mark",
					"value": '',
					"type" : "text"
				},
				{
					"id": "id_object",
					"name" :'txt_id_object',
					"image": "glyphicon glyphicon-copyright-mark",
					"propeties": 'readonly',
					"value": CF3D.right_click_sel_obj['id'],
					"type" : "text"
				},				
			],
			id_window : id_win,
		}	

		QC.open_dialog (JSON.stringify(data_dialog))

	}

}
//конец функции

/*
 * функция добавление объекта
 * vadim
 * 20141010
 */
CF3D.add_object = function (){
	if ($('#type_line').val() == 'curl'){
		CF3D.add_child();
	}
	else CF3D.add_level(); 
}
//конец функции

/*
 * функция добавление потомка объекта
 * vadim
 * 20141009
 */
CF3D.add_child = function (){

	parent_object = CF3D.scene.getObjectById(parseInt($('#id_object').val()));
	CF3D.children = [];

		var d_y = 1000;

	CF3D.add_element = $('#type_object').val()
	new_object['color'] = 0xeeeeee;
	new_object['name'] = $('#name_object').val()
	new_object['X'] = parent_object.position.x;
	new_object['Y'] = parent_object.position.y - d_y;
	new_object['Z'] = parent_object.position.z;
	new_object['level'] = parent_object.level+1;
	new_object['sbj_id'] = String(CF3D.scene.children.length);
//	CF3D.building_object(new_object);
	CF3D['add_'+CF3D.add_element](new_object);
	record_arr_connected_obj(CF3D.scene.children[CF3D.scene.children.length-2],parent_object,$('#type_line').val());
	CF3D.create_lines();

	update_typologie(parent_object, d_y);

	CF3D.create_lines();
	CF3D.children = [];
	$('#add_object_window').remove();

}
//конец функции

/*
 * функция добавление потомка объекта
 * vadim
 * 20141009
 */
CF3D.add_level = function (){

	parent_object = CF3D.scene.getObjectById(parseInt($('#id_object').val()));

		var d_y = 1000;

	CF3D.add_element = $('#type_object').val()
	new_object['color'] = 0xeeeeee;
	new_object['name'] = $('#name_object').val()
	new_object['X'] = parent_object.position.x + 1000;
	new_object['Y'] = parent_object.position.y;
	new_object['Z'] = parent_object.position.z + 1000;
	new_object['level'] = parent_object.level;
	new_object['sbj_id'] = String(CF3D.scene.children.length);
//	CF3D.building_object(new_object);
	CF3D['add_'+CF3D.add_element](new_object);
	record_arr_connected_obj(CF3D.scene.children[CF3D.scene.children.length-2],parent_object,$('#type_line').val());
	CF3D.create_lines();

	update_typologie(parent_object, d_y);

	CF3D.create_lines();
	$('#add_object_window').remove();

}
//конец функции

/*
 * функция обновления типолгии объекта
 * vadim
 * 20141010
 */
update_typologie = function (parent_object, d_y){
	var children_obj = [];
	i = 0;
	while  ( i < parent_object['lines'].length){
		var current_line = parent_object['lines'][i];
		if (current_line['from'] == parent_object) {
			children_obj[children_obj.length] = current_line['to']
			record_arr_connected_obj(current_line['to'],parent_object,current_line['type_line'])
			CF3D.delete_line(current_line)
			CF3D.scene.remove(current_line);
		}
		else i++
	}
	
	if (children_obj.length > 1){
		for (var j in children_obj){
			new_position = get_position_children_circle(children_obj.length, d_y, parseInt(j), parent_object) 
			children_obj[j].position.set(new_position.x,new_position.y,new_position.z)
			children_obj[j].label.position.set(new_position.x,new_position.y,new_position.z)
			update_typologie (children_obj[j], d_y)
		}
	}
	else if (children_obj.length == 1){
			children_obj[0].position.set(parent_object.position.x,parent_object.position.y - d_y,parent_object.position.z)
			children_obj[0].label.position.set(parent_object.position.x,parent_object.position.y - d_y,parent_object.position.z)
			update_typologie (children_obj[0], d_y)			
	}

}
//конец функции




/*
 * функция получения координат одиночного потомка у объекта
 * vadim
 * 20141013
 */
get_position_children_circle = function (count, d_y, iteration, parent_object){

		new_position = new THREE.Vector3();

		var d_grad=(2*Math.PI/count)
		var radius = 500*Math.sqrt(count);

			new_position.setX (Math.sin(d_grad*iteration)*radius+parent_object.position.x)
			new_position.setY (parent_object.position.y - d_y)
			new_position.setZ (Math.cos(d_grad*iteration)*radius+parent_object.position.z)
	return new_position;
} 
//конец функции



/*
 * функция загрузки настроек import
 * vadim
 * 20140926
 */
CF3D.load_settings_import = function (){

	for (var i in CF3D.list_settings){
		if ($.cookie(CF3D.list_settings[i]['id'])){
			settings[CF3D.list_settings[i]['id']] = $.cookie(CF3D.list_settings[i]['id'])
		}
		else {
			settings[CF3D.list_settings[i]['id']] = CF3D.list_settings[i]['default_value']
		}
	}
	CF3D.hidn_name=true;
	CF3D.scene.remove( CF3D.gridHelper );
	CF3D.scene.remove( CF3D.planeHelper );

}
//конец функции

/*
 * функция загрузки объектов и соединений
 * vadim
 * 20140926
 */
var type_line
CF3D.load_edit = function (){
	
	CF3D.mode = 'EDITOR';
	
		CF3D.load_settings_edit()
		CF3D.create_grid()

}
//конец функции

/*
 * функция загрузки настроек edit
 * vadim
 * 20141008
 */
CF3D.load_settings_edit = function (){
	for (var i in CF3D.list_settings){
		if ($.cookie(CF3D.list_settings[i]['id'])){
			settings[CF3D.list_settings[i]['id']] = $.cookie(CF3D.list_settings[i]['id'])
		}
		else {
			settings[CF3D.list_settings[i]['id']] = CF3D.list_settings[i]['default_value']
		}
	}
}
//конец функции

/*
 * функция загрузки контекстного меню
 * vadim
 * 20141008
 */
CF3D.load_context = function (context){
	this.context=context;
}
//конец функции

/*
 * функция загрузки списка importa-файлов
 * vadim
 * 20141008
 */
CF3D.load_data_import = function (form_data_import){
	this.form_data_import=form_data_import;
}
//конец функции

/*
 * функция загрузки списка настроек
 * vadim
 * 20141008
 */
CF3D.load_list_settings = function (list_settings){
	this.list_settings=list_settings;
}
//конец функции

/*
 * функция добавления название conframe файла 
 * vadim
 * 20141008
 */
CF3D.load_data_conframe = function (data_conframe){
	this.conframe_id = data_conframe['conframe_id']
	$('#file_name').html('<span class="label label-success">'+data_conframe['name']+'</span>')
}
//конец функции

/*
 * функция добавления объектов и связей посредством передачи объекта json
 * vadim
 * 20141008
 */
CF3D.load_3dgraphics_json = function (svg_json){

	CF3D.camera.position.x=svg_json['camera']['X']
	CF3D.camera.position.y=svg_json['camera']['Y']
	CF3D.camera.position.z=svg_json['camera']['Z']
	CF3D.camera.rotation._x=svg_json['camera']['rotation_x']
	CF3D.camera.rotation._y=svg_json['camera']['rotation_y']
	CF3D.camera.rotation._z=svg_json['camera']['rotation_z']
	
	if (svg_json) {
		objects=svg_json['objects']
		for (var i in objects){
			CF3D.add_element = objects[i]['typical_element_type']
//			this['add_'+CF3D.add_element]({'color': objects[i]['color'], 'radius': objects[i]['radius'], 'sbj_id': objects[i]['sbj_id'],'name': objects[i]['name'], 'X': objects[i]['X'], 'Y': objects[i]['Y'], 'Z': objects[i]['Z'], 'level':objects[i]['level']})
			this['add_'+CF3D.add_element](objects[i])
		}
		if (svg_json['connectors']) {
			var lines=svg_json['connectors']
			for (var j in lines){
				CF3D.connect_obj1 = search_obj('sbj_id',lines[j]['from']);
				CF3D.connect_obj2 = search_obj('sbj_id',lines[j]['to']);
				type_line = lines[j]['type_line'];
				CF3D.build_connect();
			}
		}
	}
};
//конец функции

CF3D.run = function (){
	this.render();
}


CF3D.clear_scene= function (){
	while( CF3D.scene.children.length > 0 ) {
		var object = CF3D.scene.children[ 0 ];
			object.parent.remove( object );
	}
}

CF3D.event_keyboard=function() {
	
	if( event.keyCode === 27 ) {
		CF3D.clear_select()
	}
/*	if (!$('select').is(":focus")){
				
		if( event.keyCode === 27 ) clear_select()
		else if ( event.keyCode == 37 && save_object && event.ctrlKey) {$('#object_position_z').val(parseInt($('#object_position_z').val())-100); save_object_change()} //arrow left keyup
		else if ( event.keyCode == 39 && save_object && event.ctrlKey) {$('#object_position_z').val(parseInt($('#object_position_z').val())+100); save_object_change()} //arrow right keyup
		else if ( event.keyCode == 37 && save_object) {$('#object_position_x').val(parseInt($('#object_position_x').val())-100); save_object_change()} //arrow left keyup
		else if ( event.keyCode == 39 && save_object) {$('#object_position_x').val(parseInt($('#object_position_x').val())+100); save_object_change()} //arrow right keyup
		else if ( event.keyCode == 38 && save_object) {$('#object_position_y').val(parseInt($('#object_position_y').val())+100); save_object_change()} //arrow up keyup
		else if ( event.keyCode == 40 && save_object) {$('#object_position_y').val(parseInt($('#object_position_y').val())-100); save_object_change()} //arrow down keyup
		else if ( event.keyCode == 67 && event.ctrlKey && save_object) {building_object({'color': save_object.currentHex.color.getHex(), 'name': '\''+save_object.name+'\'', 'X': (parseInt(save_object.position.x)+100), 'Y': (parseInt(save_object.position.y)+100), 'Z': (parseInt(save_object.position.z)+100)})} //arrow down keyup
		else if ( event.keyCode == 46 && event.altKey && save_object) {delete_lines(save_object.id)} //arrow down keyup
		else if ( event.keyCode == 46 && save_object) {clear_scene()} //arrow down keyup
	
	}
*/

	
};


/*
 * функция очистки глобальных переменных
 * vadim
 * 20140930
 */
CF3D.clear_select = function (){
	if (CF3D.right_click_sel_obj!=null){
		CF3D.create_lines(CF3D.right_click_sel_obj)
	}
	CF3D.transformControls.detach (CF3D.right_click_sel_obj);
	CF3D.right_click_sel_obj = null;
}
// конец функции


/*
 * функция создания источника света на сцене
 * vadim
 * 20140930
 */
CF3D.create_light = function (){

	var directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );
	directionalLight.position.set( CF3D.camera.position.x, CF3D.camera.position.y, CF3D.camera.position.z );
	this.scene.add( directionalLight );
	directionalLight.name = 'light';
				
//				light = CF3D.scene.children[i].get_json()
	directionalLight.get_json = function (){
		return {
			"typical_element_type":"DirectionalLight",
			"X":directionalLight.position.x,
			"Y":directionalLight.position.y,
			"Z":directionalLight.position.z,
			"color": directionalLight.color.getHex(),
		}
	}

}
// конец функции

/*
 * функция проверки соединений объектов
 * vadim
 * 20140926
 */
CF3D.is_connected = function (){
	var lines = CF3D.connect_obj1['lines'];
	for (var i in lines){
		var current_line = lines[i]
		if ((current_line['to'] == CF3D.connect_obj2) || (current_line['from'] == CF3D.connect_obj2)){
			return true;
		}
	}
	return false;
}
//конец функции

/*
 * функция связей между объектами
 * vadim
 * 20140926
 */	
CF3D.create_connect = function (){
	
	if (CF3D.is_connected() == false){
		
		var dialog = CFUtil.dialog.create("save_window",
		{
			title: langs.get_term('txt_create_connect'), 
			autoOpen: false,
			height: "auto",
			width: 500,
			modal: true
		});
		if ( dialog ){
			html = $.ajax({     
				url: url_base+"index.php/qcore/ajax/load_form/qcf3d/create_connect/",    
				type: "POST"         
			}).done(function (response, textStatus, jqXHRб){
				$(dialog).html(response);
				$('#btn_save').attr('onclick','CF3D.build_connect()')
			});
		}

	}
	else {alert(langs.get_term('err_obj_is_connec'))}
}
//конец функции

/*
 * функция пересохранения файла conframe
 * vadim
 * 20140925
 */		
CF3D.save_conframe = function (){
	
	host_string = window.location.href
	host_array = host_string.split('/')

	if (CF3D.conframe_id != null){
		var data = {
				'id':host_array[host_array.length-1],
				'key_field' : 'conframe_id',
				'data': {
						'svg_json':JSON.stringify(CF3D.get_json_objects()),
					}
			}
		
		html = $.ajax({     
			url: url_base+"index.php/qcf3d/update",
			type: "POST",
			data: data
		}).done(function (response, textStatus, jqXHRб){
			result = JSON.parse(response)
			if (result['result']== -1){output_message(result['msg'], 'alert-danger');}
			else {output_message(langs.get_term('I200'), 'alert-success');}
		});
	}
	else CF3D.save_as_conframe()

}
//конец функции

/*
 * функция сохранения файла conframe
 * vadim
 * 20140925
 */		
CF3D.save_as_conframe = function (){

	var dialog = CFUtil.dialog.create("save_window",
	{
		title: 'asdasf', 
		autoOpen: false,
		height: "auto",
		width: 500,
		modal: true
	});
	if ( dialog ){
		html = $.ajax({     
			url: url_base+"index.php/qcore/ajax/load_form/qcf3d/save_form/",    
			type: "POST"         
		}).done(function (response, textStatus, jqXHRб){
			$(dialog).html(response);
			$('#svg_json').val(JSON.stringify(CF3D.get_json_objects()))
		});
	}

}
//конец функции


/*
 * функция вывода сообщения о статусе выполнения запроса
 * vadim
 * 20141008
 */
function output_message(text, class_alarm){
	var dialog =new CFEAlert('');
	dialog.set_message(text);
	dialog.set_type(class_alarm);
	dialog.show_message();
}
//конец функции

/*
 * функция вывода сообщения о статусе выполнения запроса
 * vadim
 * 20141008
 */
CF3D.delete_object = function (){
	if (CF3D.right_click_sel_obj){
		CF3D.rec_del_lines();
		CF3D.scene.remove(CF3D.right_click_sel_obj.label);
		CF3D.scene.remove(CF3D.right_click_sel_obj);
		CF3D.right_click_sel_obj = null;
		$('#pop_up_window_div').remove();
	}
}
//конец функции

CF3D.get_camera_json = function(){
	return {
			'X':CF3D.camera.position.x,
			'Y':CF3D.camera.position.y,
			'Z':CF3D.camera.position.z,
			'far':CF3D.camera.far,
			'fov':CF3D.camera.fov,
			'near':CF3D.camera.near,
			'rotation_x':CF3D.camera.rotation._x,
			'rotation_y':CF3D.camera.rotation._y,
			'rotation_z':CF3D.camera.rotation._z
		};
}
/*
 * функция добавления объектов
 * vadim
 * 20141007
 */		
CF3D.get_json_objects = function (){

	var conframe_data = new Array();	
		save_json={
			'scene':{},
			'camera':CF3D.get_camera_json(),
			'objects':{},
			'light':{},
			'connectors':{}}
	var objects = new Array()	
	var lines = new Array()	
	for (var i in CF3D.scene.children){
		if (CF3D.scene.children[i].type_line){
			lines [lines.length]= CF3D.scene.children[i].get_json()
		}
		else if (CF3D.scene.children[i]['geometry'] instanceof THREE.SphereGeometry){
			objects[objects.length] = CF3D.scene.children[i].get_json()
		}
		else if (CF3D.scene.children[i]['geometry'] instanceof THREE.BoxGeometry){
			objects[objects.length] = CF3D.scene.children[i].get_json()
		}
		else if (CF3D.scene.children[i]['geometry'] instanceof THREE.CylinderGeometry){
			objects[objects.length] = CF3D.scene.children[i].get_json()
		}		
		else if (CF3D.scene.children[i].name == 'light'){
			light = CF3D.scene.children[i].get_json()
		}
	}
	save_json['objects']=objects;
	save_json['light']=light;
	save_json['connectors']=lines;
		
	return save_json;
}
//конец функции


/*
 * функция добавления объектов типа сфера
 * vadim
 * 20141017
 */
CF3D.add_sphere = function (elm){

	if (this.scene.children.length==0){
		CF3D.create_light();
		i=0;
		CF3D.init_helper_arrow();
	}

	var geometry1 = new THREE.SphereGeometry(elm['radius'],40,40);//задание тип фигуры - сфера, (радиус, количество меридиан, количество параллелей)
	
	if(elm['name'].indexOf('Россети') + 1) {
		var texture= THREE.ImageUtils.loadTexture(CF3D.base_url+'img/logotip_rosseti(texture).png')
		texture.anistropy=8;
		var material1 = new THREE.MeshPhongMaterial({map:texture, emissive: 0xffffff})
	}
	else{
		var material1 = new THREE.MeshPhongMaterial({color:elm['color'], emissive: elm['color']})
	}
	
	build_object = new THREE.Mesh (geometry1,material1)

	this.scene.add(build_object)
	build_object.name=elm['name'];
	build_object.select=true;
	build_object.position.set(elm['X'],elm['Y'],elm['Z']);
	if (elm['lines']) build_object.lines=elm['lines'];
	else build_object.lines=[];
	build_object.type_element=CF3D.add_element;
	build_object.open_obj=false;
	build_object.sbj_id=elm['sbj_id'];
	if (elm['parent_obj']) build_object.parent_obj = elm['parent_obj']

	build_object.addEventListener('click', function() {console.log("clicked the three.js ball");});
	
		build_object.get_json = function(){
			return {
				"typical_element_type":"sphere",
				"X":this.position.x,
				"Y":this.position.y,
				"Z":this.position.z,
				"radius":this['geometry']['boundingSphere']['radius'],
				"color": this.material.color.getHex(),
				"level": this['level'],
				"name": this['name'],
				"sbj_id": this['sbj_id'],
			}
			
		}
		build_object.copy_element = function(){
			CF3D.copy_element = this
			$('#pop_up_window_div').remove();
		}

		build_object.cut_element = function(){
			this.copy_element();
			CF3D.right_click_sel_obj = this
			CF3D.rec_del_lines();
			connected_obj = new Array()
			CF3D.scene.remove(this.label)
			CF3D.scene.remove(this)
		}


	if (elm['level']){
		build_object.level=elm['level'];	
	}
	build_object.sbj_id=elm['sbj_id']	
	if (elm['child_obj']){
		build_object.child_obj=elm['child_obj'];
	}
	
	CF3D.add_label_name(build_object)
		
	CF3D.add_element = null

}
//конец функции


/*
 * функция добавления объектов типа куб
 * vadim
 * 20141017
 */
CF3D.add_cube = function (elm){

	if (this.scene.children.length==0){
		CF3D.create_light();
		i=0;
		CF3D.init_helper_arrow();
	}

	var geometry1 = new THREE.BoxGeometry(elm['width'],elm['height'],elm['depth']);//задание тип фигуры - куб, (ширина, длина, высота)
	
	var material1 = new THREE.MeshPhongMaterial({color:elm['color'], emissive: elm['color']})
	
	build_object = new THREE.Mesh (geometry1,material1)

	this.scene.add(build_object)
	build_object.name=elm['name'];
	build_object.select=true;
	build_object.position.set(elm['X'],elm['Y'],elm['Z']);
	if (elm['lines']) build_object.lines=elm['lines'];
	else build_object.lines=[];
	build_object.type_element=CF3D.add_element;
	build_object.open_obj=false;
	build_object.sbj_id=elm['sbj_id'];
	if (elm['parent_obj']) build_object.parent_obj = elm['parent_obj']
	
	build_object.addEventListener("dblclick", function (){alert(1)});

		build_object.get_json = function(){
			return {
				"typical_element_type":"sphere",
				"X":this.position.x,
				"Y":this.position.y,
				"Z":this.position.z,
				"radius":this['geometry']['boundingSphere']['radius'],
				"color": this.material.color.getHex(),
				"level": this['level'],
				"name": this['name'],
				"sbj_id": this['sbj_id'],
			}
			
		}
		build_object.copy_element = function(){
			CF3D.copy_element = this
			$('#pop_up_window_div').remove();
		}

		build_object.cut_element = function(){
			this.copy_element();
			CF3D.right_click_sel_obj = this
			CF3D.rec_del_lines();
			connected_obj = new Array()
			CF3D.scene.remove(this.label)
			CF3D.scene.remove(this)
		}

	
	if (elm['level']){
		build_object.level=elm['level'];	
	}
	build_object.sbj_id=elm['sbj_id']	
	if (elm['child_obj']){
		build_object.child_obj=elm['child_obj'];
	}
	
	CF3D.add_label_name(build_object)
		
	CF3D.add_element = null

}
//конец функции


/*
 * функция добавления объектов типа цилиндр
 * vadim
 * 20141017
 */
CF3D.add_conus = function (elm){

	if (this.scene.children.length==0){
		CF3D.create_light();
		i=0;
		CF3D.init_helper_arrow();
	}

	var geometry1 = new THREE.CylinderGeometry(elm['radiusTop'], elm['radiusBottom'], elm['height'], elm['radiusSegments']);//задание тип фигуры - конус, (радиусВерха, радиусНизу, высота, количество сегментов)
	
	if(elm['name'].indexOf('Россети') + 1) {
		var texture= THREE.ImageUtils.loadTexture(CF3D.base_url+'img/logotip_rosseti(texture).png')
		texture.anistropy=8;
		var material1 = new THREE.MeshPhongMaterial({map:texture, emissive: 0xffffff})
	}
	else{
		var material1 = new THREE.MeshPhongMaterial({color:elm['color'], emissive: elm['color']})
	}
	
	build_object = new THREE.Mesh (geometry1,material1)

	this.scene.add(build_object)
	build_object.name=elm['name'];
	build_object.select=true;
	build_object.position.set(elm['X'],elm['Y'],elm['Z']);
	if (elm['lines']) build_object.lines=elm['lines'];
	else build_object.lines=[];
	build_object.type_element=CF3D.add_element;
	build_object.open_obj=false;
	build_object.sbj_id=elm['sbj_id'];
	if (elm['parent_obj']) build_object.parent_obj = elm['parent_obj']
	
	
		build_object.get_json = function(){
			return {
				"typical_element_type":"sphere",
				"X":this.position.x,
				"Y":this.position.y,
				"Z":this.position.z,
				"radius":this['geometry']['boundingSphere']['radius'],
				"color": this.material.color.getHex(),
				"level": this['level'],
				"name": this['name'],
				"sbj_id": this['sbj_id'],
			}
		}
		build_object.copy_element = function(){
			CF3D.copy_element = this
			$('#pop_up_window_div').remove();
		}

		build_object.cut_element = function(){
			this.copy_element();
			CF3D.right_click_sel_obj = this
			CF3D.rec_del_lines();
			connected_obj = new Array()
			CF3D.scene.remove(this.label)
			CF3D.scene.remove(this)
		}

	
	if (elm['level']){
		build_object.level=elm['level'];	
	}
	build_object.sbj_id=elm['sbj_id']	
	if (elm['child_obj']){
		build_object.child_obj=elm['child_obj'];
	}
	
	CF3D.add_label_name(build_object)
		
	CF3D.add_element = null

}
//конец функции

/*
 * функция добавления метки наименования
 * vadim
 * 20141017
 */
CF3D.add_label_name = function(build_object){

	var text = document.createElement( 'div' );
	text.className = 'label';
	if (CF3D.hidn_name==false) text.className+=' hidn_label';
	text.id = build_object.id;
	text.style.color = settings['color_name'];
//			text.style.fontSize = '1px';
	text.textContent = build_object.name;

	var label = new THREE.CSS2DObject( text );
//			label.position.copy( build_object.position );
	label.position.x = build_object.position.x;
	label.position.y = build_object.position.y;
	label.position.z = build_object.position.z;
	this.scene.add( label );	

	build_object.label = label

}
//конец функции


/* 			
 * содениние объектов с помощью произвольных линий
 * vadim
 * 20140926
 */
//var j = 0
CF3D.connect_curl = function(){
	
	start_obj = CF3D.connect_obj1;
	end_obj = CF3D.connect_obj2;
	var randomPoints = [];
	randomPoints.push( new THREE.Vector3( start_obj.position.x,start_obj.position.y,start_obj.position.z ) );

		var start=start_obj.position
		var end=end_obj.position
		var del=parseInt(start.distanceTo( end )/100)
		var del_x=(start_obj.position.x-end_obj.position.x)/del
		var del_y=(start_obj.position.y-end_obj.position.y)/del
		var del_z=(start_obj.position.z-end_obj.position.z)/del
		
	for ( var i = 0; i < del; i ++ ) {
		
		randomPoints.push( new THREE.Vector3( THREE.Math.randFloat( start_obj.position.x-(i* del_x)-30, start_obj.position.x-(i* del_x)+30 ), ( start_obj.position.y-(i*del_y) ), THREE.Math.randFloat( start_obj.position.z-(i* del_z)-30, start_obj.position.z-(i* del_z)+30 ) ) );
		
	}
	randomPoints.push( new THREE.Vector3( end_obj.position.x,end_obj.position.y,end_obj.position.z ) );

	var randomSpline =  new THREE.SplineCurve3( randomPoints );

	var extrudeSettings = {
		steps			: 200,
		bevelEnabled	: false,
		extrudePath		: randomSpline
	};


	var pts = [], numPts = 4;

	for ( var i = 0; i < numPts * 2; i ++ ) {

		var l = i % 2 == 1 ? 2.5 : 5;

		var a = i / numPts * Math.PI;

		pts.push( new THREE.Vector2 ( Math.cos( a ) * l, Math.sin( a ) * l ) );

	}

	var shape = new THREE.Shape( pts );

	var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );

	var material2 = new THREE.MeshLambertMaterial( { color: settings['color_line'], wireframe: false } );

	var new_line = new THREE.Mesh( geometry, material2 );
	new_line.select=true

	new_line.from=start_obj
	new_line.to=end_obj
	

	new_line.type_line='curl';
	if (type_line) new_line.type_line = type_line
	
	start_obj.lines.push(new_line)
	end_obj.lines.push(new_line)
	
//	this.lines[j] = new_line;
	
	this.scene.add( new_line );
	
	new_line.get_json = function (){
	
		return {
			"to":new_line.to['sbj_id'],
			"from":new_line.from['sbj_id'],
			"color": new_line.material.color.getHex(),
			"type_line": new_line.type_line,
		}
	
	};
//	j++
//	$('#save_window').dialog('close')
//	type_line = null
}
// конец процедуры

/*
 * функция для построения связи прямой линии
 * vadim
 * 20140926
 */
CF3D.connect_straight = function (){

	start_obj = CF3D.connect_obj1;
	end_obj = CF3D.connect_obj2;
	var boxGeometry = new THREE.BoxGeometry( 10, 10, 10 );

	var start = start_obj.position
	var end = end_obj.position
	
	//start.multiplyScalar( 75 );
	//end.multiplyScalar( 75 );

	var new_line = new THREE.Mesh( boxGeometry, new THREE.MeshLambertMaterial( {color:settings['color_line']}) );
	new_line.position.copy( start );
	new_line.position.lerp( end, 0.5 );
	new_line.scale.set( 1,1, start.distanceTo( end )/10 );
	new_line.lookAt( end );
	new_line.from=start_obj
	new_line.to=end_obj
	
	start_obj.lines.push(new_line)
	end_obj.lines.push(new_line)
	
	new_line.select=true	

	new_line.type_line = 'straight';
	CF3D.scene.add( new_line );

	new_line.get_json = function (){
	
		return {
			"to":new_line.to['sbj_id'],
			"from":new_line.from['sbj_id'],
			"color": new_line.material.color.getHex(),
			"type_line": new_line.type_line,
		}
	
	};	
	
}
// конец процедуры


/*
 * функция загрузки вспомогательного окна 3D-conframe
 * vadim
 * 20141007
 */
CF3D.open_conframe = function (){

	html = $.ajax({     
		url: url_base+"index.php/qcf3d/get_list_conframe",    
		type: "POST"         
	}).done(function (response, textStatus, jqXHRб){

		list_conframe = (JSON.parse(response))

		id_win = "open_conframe";		
		data_dialog = {
			parameters:	{
				title: langs.get_term("txt_data_object"),
				autoOpen: false,
				height: 'auto',
				width: 'auto',
				position: 'top',
			},
			down_panel_buttons:[
				{
					"name":langs.get_term('sm_btn_save'),
					"onclick":"CF3D.new_page('index.php/qcf3d/edit/','conframe')",
					"style":"btn btn-primary btn-sm",
					"id":"btn_save",
				},
				{
					"name":langs.get_term('btn_cancel'),
					"onclick":"$(\'#"+id_win+"\').dialog(\'close\')",
					"style":"btn btn-primary btn-sm",
					"id":"btn_cancel",
				}
			],
			fields_main_content : [
				{
					"id": "conframe",
					"name" : langs.get_term('sm_btn_conframe'),
					"image": "glyphicon glyphicon-copyright-mark",
					"value": "",
					"type" : "select",
					"options" : list_conframe
				},
			],
			id_window : id_win,
			view_templ: "tmpl_main_content",
			
		}
		
		QC.open_dialog(JSON.stringify(data_dialog))
	})	

}
// конец процедуры

/*
 * функция загрузки нового поля conframe 
 * vadim
 * 20141007
 */
CF3D.new_conframe = function (){
/*	CF3D.clear_scene();
//		$.cookie('grid'.false)
	CF3D.gridHelper=null
	CF3D.create_light()	
	CF3D.show_hide_grid();
	CF3D.init_helper_arrow()
*/
	CF3D.new_page('index.php/qcf3d/',null)
}
// конец процедуры


/*
 * функция загрузки 3D-conframe файла 
 * vadim
 * 20141007
 */
CF3D.new_page = function (url, value){
	if (value != null) {
		value = $('#'+value).val()
	}
	else {
		value = '';
	}
	location.href=CF3D.base_url+url+value;
}
// конец процедуры


//функция вывода контекстного меню	
open_pop_window = function(x, y, view){
	
	if (CF3D.transformControls.object != null){
		CF3D.clear_select()
		CF3D.create_lines(CF3D.right_click_sel_obj)
	}
	
	if (CF3D.selected_obj && CF3D.selected_obj != CF3D.planeHelper){
		CF3D.right_click_sel_obj = CF3D.selected_obj;
		CF3D.change_lvl_color = CF3D.right_click_sel_obj['level']
	}
	$("#pop_up_window_div").remove();
	var pop_up_window_div = '<div id="pop_up_window_div" class="pop_up_window" style="position:absolute;left:'+x+'px;top:'+y+'px;"></div>';
	$("body").append(pop_up_window_div);
	var pop_menus = '';
	for (var j in CF3D.context){
		if ( CF3D.context[j]['view'] == view ){
			pop_menus += '<hr style= "padding:1px;margin:3px;">';
			pop_menus += '<li class="pop_up_item" onclick="'+CF3D.context[j]['on_click']+'">';
			pop_menus += '<span class="'+CF3D.context[j]['image']+'"></span>&nbsp;';
			pop_menus += langs.get_term(CF3D.context[j]['name']);
			pop_menus += '</li>';
		}	
	}
	$("#pop_up_window_div").html(pop_menus);
	
} 			
//конец


/*
 * функция запуска функция перемещения объекта
 * vadim
 * 20140926
 */
CF3D.move_object = function (){
	
	$("#pop_up_window_div").remove();
	CF3D.transformControls.attach(CF3D.right_click_sel_obj)
		CF3D.rec_del_lines()
}	
// конец

/*
 * функция удаления линий объекта и запись в память
 * vadim
 * 20140926
 */
var connected_obj = new Array()
CF3D.rec_del_lines = function (){
	var obj = CF3D.right_click_sel_obj;
	var i = 0;
	while  ( i < obj['lines'].length){
		var current_line = obj['lines'][i]
		record_arr_connected_obj (current_line['to'], current_line['from'],current_line['type_line'])
		CF3D.delete_line(current_line);
		CF3D.scene.remove(current_line);
	}
}
//конец функции


/*
 * функция удаление в объекте линии из списка линий
 * vadim
 * 20140929
 */
CF3D.delete_line = function (current_line){
	
//	record_arr_connected_obj (current_line['to'], current_line['from'],current_line['type_line'])

	var obj = current_line.to
	for (var j=0; j<obj['lines'].length; j++){
		if (obj['lines'][j]==current_line) {
			obj['lines'].splice(j,1);
		}
	}
	obj = current_line.from
	for (var k=0; k<obj['lines'].length; k++){
		if (obj['lines'][k]==current_line) {
			obj['lines'].splice(k,1);
		}
	}

}
//конец функции

/*
 * функция записи в глобальный временный массив вершин соединенных связью
 * vadim
 * 20141016
 */
record_arr_connected_obj = function (to,from,type_line){

	connected_obj[connected_obj.length] = {
		'to': to,
		'from': from,
		'type_line': type_line
	}

}
//конец функции


/*
 * функция для генерирования связей из данных занесенных в массив connected_obj
 * vadim
 * 20140926
 */	
CF3D.create_lines = function(obj){

	for (var i=0; i<connected_obj.length;i++){
		CF3D.connect_obj1 = connected_obj[i]['from'];
		CF3D.connect_obj2 = connected_obj[i]['to'];
		type_line = connected_obj[i]['type_line'];
		CF3D['connect_'+type_line]();
	}
	connected_obj = new Array()
}
// конец функции



/*
 * функция сохранения файла conframe
 * vadim
 * 20140926
 */		
CF3D.build_connect = function (){

	if ($('#line_type').val() != null){
		type_line = $('#line_type').val();
	}
	CF3D['connect_'+type_line]();
	$('#save_window').dialog('close');

}
//конец функции



/*
 * функция изменения ширины страницы
 * vadim
 * 20141009
 */
function onWindowResize() {

	CF3D.camera.aspect = window.innerWidth / window.innerHeight;
	CF3D.camera.updateProjectionMatrix();
	CF3D.labelRenderer.setSize( window.innerWidth, window.innerHeight );
	CF3D.renderer.setSize( window.innerWidth, window.innerHeight );
	
}
// конец функции
	
		
		
CF3D.render = function () {
	CF3D.controls.update()
	
	CF3D.transformControls.update()
	
	var vector = new THREE.Vector3( CF3D.mouse.x, CF3D.mouse.y, 1 );

	CF3D.projector.unprojectVector( vector, CF3D.camera );

	CF3D.raycaster.set( CF3D.camera.position, vector.sub( CF3D.camera.position ).normalize() );
	var intersects = CF3D.raycaster.intersectObjects( CF3D.scene.children );
	if ( intersects.length >0 ) {

		if ( CF3D.selected_obj != intersects[ 0 ].object ) {

			if ( CF3D.selected_obj ){
				CF3D.selected_obj.material = CF3D.selected_obj.currentHex;
				CF3D.selected_obj = null;
			}
			if (intersects[ 0 ].object.select == true) {
				CF3D.selected_obj = intersects[ 0 ].object;
				CF3D.selected_obj.currentHex = CF3D.selected_obj.material;
				CF3D.selected_obj.material=new THREE.MeshLambertMaterial({color: 0xb0cdcb});
			}
			
		}
		if (intersects[ 0 ].object.geometry  instanceof THREE.PlaneGeometry ){
			paste_position = intersects[ 0 ].point;
		}
	}	
	else {

		if ( CF3D.selected_obj ) CF3D.selected_obj.material= CF3D.selected_obj.currentHex ;

			paste_position = null;

		CF3D.selected_obj = null;
		CF3D.controls.enabled = true;
	}

	if ( CF3D.right_click_sel_obj && CF3D.right_click_sel_obj['label'])	{
		CF3D.right_click_sel_obj['label'].position.set(CF3D.right_click_sel_obj.position.x,CF3D.right_click_sel_obj.position.y,CF3D.right_click_sel_obj.position.z)
	}
	requestAnimationFrame(CF3D.render);

	CF3D.renderer.render(CF3D.scene, CF3D.camera);
	CF3D.labelRenderer.render( CF3D.scene, CF3D.camera );
		
};